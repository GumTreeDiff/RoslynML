using System.Xml.Linq;
using CommandLineApp;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests
{
    partial class RoslynMLTests
    {
        [TestMethod]
        public void ExpressionSyntax_QueryExpressionSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseExpression("from f in s where f.A select f.R");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<QueryExpression startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"32\"><FromClause startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"11\" part=\"FromClause\"><Token kind=\"FromKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"FromKeyword\">from</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Identifier\">f</Token><Token kind=\"InKeyword\" Keyword=\"true\" TypeParameterVariance=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"9\" part=\"InKeyword\">in</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">s</Token></IdentifierName></FromClause><QueryBody startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"32\" part=\"Body\"><List_of_QueryClause part=\"Clauses\"><WhereClause startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"21\"><Token kind=\"WhereKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"17\" part=\"WhereKeyword\">where</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"21\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">A</Token></IdentifierName></MemberAccessExpression></WhereClause></List_of_QueryClause><SelectClause startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"32\" part=\"SelectOrGroup\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"28\" part=\"SelectKeyword\">select</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"32\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Identifier\">R</Token></IdentifierName></MemberAccessExpression></SelectClause></QueryBody></QueryExpression>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_FromClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from f in s where f.A select f.R");
            var xElement = converter.Visit(node.FromClause);
            Assert.AreEqual("<FromClause startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"11\"><Token kind=\"FromKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"FromKeyword\">from</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Identifier\">f</Token><Token kind=\"InKeyword\" Keyword=\"true\" TypeParameterVariance=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"9\" part=\"InKeyword\">in</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">s</Token></IdentifierName></FromClause>", xElement.ToString(SaveOptions.DisableFormatting));

            node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from A f in s");
            xElement = converter.Visit(node.FromClause);
            Assert.AreEqual("<FromClause startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"13\"><Token kind=\"FromKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"FromKeyword\">from</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Type\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Identifier\">A</Token></IdentifierName><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Identifier\">f</Token><Token kind=\"InKeyword\" Keyword=\"true\" TypeParameterVariance=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"11\" part=\"InKeyword\">in</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Identifier\">s</Token></IdentifierName></FromClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_QueryBodySyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from f in s let y = 5 where f.A select f.R");
            var xElement = converter.Visit(node.Body);
            Assert.AreEqual("<QueryBody startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"42\"><List_of_QueryClause part=\"Clauses\"><LetClause startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"21\"><Token kind=\"LetKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"15\" part=\"LetKeyword\">let</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"Identifier\">y</Token><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Token\">5</Token></LiteralExpression></LetClause><WhereClause startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"31\"><Token kind=\"WhereKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"27\" part=\"WhereKeyword\">where</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"31\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"Identifier\">A</Token></IdentifierName></MemberAccessExpression></WhereClause></List_of_QueryClause><SelectClause startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"42\" part=\"SelectOrGroup\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"38\" part=\"SelectKeyword\">select</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"42\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"41\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Identifier\">R</Token></IdentifierName></MemberAccessExpression></SelectClause></QueryBody>", xElement.ToString(SaveOptions.DisableFormatting));

            node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from A a in t let y = 5 where a.F select b.C into r select r.R");
            xElement = converter.Visit(node.Body);
            Assert.AreEqual("<QueryBody startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"62\"><List_of_QueryClause part=\"Clauses\"><LetClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"23\"><Token kind=\"LetKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"17\" part=\"LetKeyword\">let</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">y</Token><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Token\">5</Token></LiteralExpression></LetClause><WhereClause startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"33\"><Token kind=\"WhereKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"29\" part=\"WhereKeyword\">where</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"33\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"Identifier\">F</Token></IdentifierName></MemberAccessExpression></WhereClause></List_of_QueryClause><SelectClause startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"44\" part=\"SelectOrGroup\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"40\" part=\"SelectKeyword\">select</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"44\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Identifier\">b</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"43\" endLine=\"1\" endColumn=\"43\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"44\" endLine=\"1\" endColumn=\"44\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"44\" endLine=\"1\" endColumn=\"44\" part=\"Identifier\">C</Token></IdentifierName></MemberAccessExpression></SelectClause><QueryContinuation startLine=\"1\" startColumn=\"46\" endLine=\"1\" endColumn=\"62\" part=\"Continuation\"><Token kind=\"IntoKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"46\" endLine=\"1\" endColumn=\"49\" part=\"IntoKeyword\">into</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"51\" endLine=\"1\" endColumn=\"51\" part=\"Identifier\">r</Token><QueryBody startLine=\"1\" startColumn=\"53\" endLine=\"1\" endColumn=\"62\" part=\"Body\"><SelectClause startLine=\"1\" startColumn=\"53\" endLine=\"1\" endColumn=\"62\" part=\"SelectOrGroup\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"53\" endLine=\"1\" endColumn=\"58\" part=\"SelectKeyword\">select</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"62\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"60\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"60\" part=\"Identifier\">r</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"61\" endLine=\"1\" endColumn=\"61\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"62\" endLine=\"1\" endColumn=\"62\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"62\" endLine=\"1\" endColumn=\"62\" part=\"Identifier\">R</Token></IdentifierName></MemberAccessExpression></SelectClause></QueryBody></QueryContinuation></QueryBody>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_LetClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from A f in s let y = 5");
            var xElement = converter.Visit(node.Body.Clauses[0]);
            Assert.AreEqual("<LetClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"23\"><Token kind=\"LetKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"17\" part=\"LetKeyword\">let</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">y</Token><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Token\">5</Token></LiteralExpression></LetClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_JoinClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from f in s join T t in F on t.L equals s.R into y");
            var xElement = converter.Visit(node.Body.Clauses[0]);
            Assert.AreEqual("<JoinClause startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"50\"><Token kind=\"JoinKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"16\" part=\"JoinKeyword\">join</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Type\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Identifier\">T</Token></IdentifierName><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"Identifier\">t</Token><Token kind=\"InKeyword\" Keyword=\"true\" TypeParameterVariance=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"23\" part=\"InKeyword\">in</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"InExpression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Identifier\">F</Token></IdentifierName><Token kind=\"OnKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"28\" part=\"OnKeyword\">on</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"32\" part=\"LeftExpression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Identifier\">t</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Identifier\">L</Token></IdentifierName></MemberAccessExpression><Token kind=\"EqualsKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"39\" part=\"EqualsKeyword\">equals</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"43\" part=\"RightExpression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"41\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"41\" part=\"Identifier\">s</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"43\" endLine=\"1\" endColumn=\"43\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"43\" endLine=\"1\" endColumn=\"43\" part=\"Identifier\">R</Token></IdentifierName></MemberAccessExpression><JoinIntoClause startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"50\" part=\"Into\"><Token kind=\"IntoKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"48\" part=\"IntoKeyword\">into</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"50\" endLine=\"1\" endColumn=\"50\" part=\"Identifier\">y</Token></JoinIntoClause></JoinClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_WhereClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from A f in s where y = 5");
            var xElement = converter.Visit(node.Body.Clauses[0]);
            Assert.AreEqual("<WhereClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"25\"><Token kind=\"WhereKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"19\" part=\"WhereKeyword\">where</Token><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"25\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">y</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression></WhereClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_OrderByClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from A f in s orderby f.y");
            var xElement = converter.Visit(node.Body.Clauses[0]);
            Assert.AreEqual("<OrderByClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"25\"><Token kind=\"OrderByKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"21\" part=\"OrderByKeyword\">orderby</Token><SeparatedList_of_Ordering part=\"Orderings\"><Ordering kind=\"AscendingOrdering\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"25\"><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"25\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Identifier\">y</Token></IdentifierName></MemberAccessExpression></Ordering></SeparatedList_of_Ordering></OrderByClause>", xElement.ToString(SaveOptions.DisableFormatting));

            node = (QueryExpressionSyntax)SyntaxFactory.ParseExpression("from A f in s orderby f.y ascending, f.z descending");
            xElement = converter.Visit(node.Body.Clauses[0]);
            Assert.AreEqual("<OrderByClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"51\"><Token kind=\"OrderByKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"21\" part=\"OrderByKeyword\">orderby</Token><SeparatedList_of_Ordering part=\"Orderings\"><Ordering kind=\"AscendingOrdering\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"35\"><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"25\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Identifier\">y</Token></IdentifierName></MemberAccessExpression><Token kind=\"AscendingKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"35\" part=\"AscendingOrDescendingKeyword\">ascending</Token></Ordering><Ordering kind=\"DescendingOrdering\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"51\"><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"40\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"39\" endLine=\"1\" endColumn=\"39\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"Identifier\">z</Token></IdentifierName></MemberAccessExpression><Token kind=\"DescendingKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"51\" part=\"AscendingOrDescendingKeyword\">descending</Token></Ordering></SeparatedList_of_Ordering></OrderByClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_SelectClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseExpression("from A f in s select f");
            var xElement = converter.Visit(((QueryExpressionSyntax)node).Body.SelectOrGroup);
            Assert.AreEqual("<SelectClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"22\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"20\" part=\"SelectKeyword\">select</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">f</Token></IdentifierName></SelectClause>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseExpression("from A f in s select w.z");
            xElement = converter.Visit(((QueryExpressionSyntax)node).Body.SelectOrGroup);
            Assert.AreEqual("<SelectClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"24\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"20\" part=\"SelectKeyword\">select</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"24\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">w</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"Identifier\">z</Token></IdentifierName></MemberAccessExpression></SelectClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_GroupClauseSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseExpression("from A f in s group g by f.r");
            var xElement = converter.Visit(((QueryExpressionSyntax)node).Body.SelectOrGroup);
            Assert.AreEqual("<GroupClause startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"28\"><Token kind=\"GroupKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"19\" part=\"GroupKeyword\">group</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"GroupExpression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">g</Token></IdentifierName><Token kind=\"ByKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"24\" part=\"ByKeyword\">by</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"28\" part=\"ByExpression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"Identifier\">r</Token></IdentifierName></MemberAccessExpression></GroupClause>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_QueryContinuationSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseExpression("from A f in s select f into g select f.r");
            var xElement = converter.Visit(((QueryExpressionSyntax)node).Body.Continuation);
            Assert.AreEqual("<QueryContinuation startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"40\"><Token kind=\"IntoKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"27\" part=\"IntoKeyword\">into</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Identifier\">g</Token><QueryBody startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"40\" part=\"Body\"><SelectClause startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"40\" part=\"SelectOrGroup\"><Token kind=\"SelectKeyword\" Keyword=\"true\" Contextual=\"true\" Query=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"36\" part=\"SelectKeyword\">select</Token><MemberAccessExpression kind=\"SimpleMemberAccessExpression\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"40\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"Identifier\">f</Token></IdentifierName><Token kind=\"DotToken\" Operator=\"true\" startLine=\"1\" startColumn=\"39\" endLine=\"1\" endColumn=\"39\" part=\"OperatorToken\">.</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"Identifier\">r</Token></IdentifierName></MemberAccessExpression></SelectClause></QueryBody></QueryContinuation>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_InterpolatedStringExpressionSyntaxAndInterpolatedStringTextSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseExpression("$\"Hello world\"");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<InterpolatedStringExpression startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"14\"><Token kind=\"InterpolatedStringStartToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"StringStartToken\">$\"</Token><List_of_InterpolatedStringContent part=\"Contents\"><InterpolatedStringText startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"13\"><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"13\" part=\"TextToken\">Hello world</Token></InterpolatedStringText></List_of_InterpolatedStringContent><Token kind=\"InterpolatedStringEndToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"StringEndToken\">\"</Token></InterpolatedStringExpression>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void ExpressionSyntax_InterpolatedStringExpressionSyntaxAndInterpolationSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseExpression("$\"Hello world {Name, 5:N2}\"");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<InterpolatedStringExpression startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"27\"><Token kind=\"InterpolatedStringStartToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"StringStartToken\">$\"</Token><List_of_InterpolatedStringContent part=\"Contents\"><InterpolatedStringText startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\"><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\" part=\"TextToken\">Hello world </Token></InterpolatedStringText><Interpolation startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"26\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"OpenBraceToken\">{</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">Name</Token></IdentifierName><InterpolationAlignmentClause startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"22\" part=\"AlignmentClause\"><Token kind=\"CommaToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"CommaToken\">,</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Token\">5</Token></LiteralExpression></InterpolationAlignmentClause><InterpolationFormatClause startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"25\" part=\"FormatClause\"><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"ColonToken\">:</Token><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"25\" part=\"FormatStringToken\">N2</Token></InterpolationFormatClause><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"CloseBraceToken\">}</Token></Interpolation></List_of_InterpolatedStringContent><Token kind=\"InterpolatedStringEndToken\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"StringEndToken\">\"</Token></InterpolatedStringExpression>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseExpression("$\"Hello world {Name :N2}\"");
            xElement = converter.Visit(node);
            Assert.AreEqual("<InterpolatedStringExpression startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"25\"><Token kind=\"InterpolatedStringStartToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"StringStartToken\">$\"</Token><List_of_InterpolatedStringContent part=\"Contents\"><InterpolatedStringText startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\"><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\" part=\"TextToken\">Hello world </Token></InterpolatedStringText><Interpolation startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"24\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"OpenBraceToken\">{</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">Name</Token></IdentifierName><InterpolationFormatClause startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"FormatClause\"><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"ColonToken\">:</Token><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"23\" part=\"FormatStringToken\">N2</Token></InterpolationFormatClause><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"CloseBraceToken\">}</Token></Interpolation></List_of_InterpolatedStringContent><Token kind=\"InterpolatedStringEndToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"StringEndToken\">\"</Token></InterpolatedStringExpression>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseExpression("$\"Hello world {Name,5}\"");
            xElement = converter.Visit(node);
            Assert.AreEqual("<InterpolatedStringExpression startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"23\"><Token kind=\"InterpolatedStringStartToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"StringStartToken\">$\"</Token><List_of_InterpolatedStringContent part=\"Contents\"><InterpolatedStringText startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\"><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\" part=\"TextToken\">Hello world </Token></InterpolatedStringText><Interpolation startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"22\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"OpenBraceToken\">{</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">Name</Token></IdentifierName><InterpolationAlignmentClause startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"21\" part=\"AlignmentClause\"><Token kind=\"CommaToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"CommaToken\">,</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Token\">5</Token></LiteralExpression></InterpolationAlignmentClause><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"CloseBraceToken\">}</Token></Interpolation></List_of_InterpolatedStringContent><Token kind=\"InterpolatedStringEndToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"StringEndToken\">\"</Token></InterpolatedStringExpression>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseExpression("$\"Hello world {Name}\"");
            xElement = converter.Visit(node);
            Assert.AreEqual("<InterpolatedStringExpression startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"21\"><Token kind=\"InterpolatedStringStartToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"StringStartToken\">$\"</Token><List_of_InterpolatedStringContent part=\"Contents\"><InterpolatedStringText startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\"><Token kind=\"InterpolatedStringTextToken\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"14\" part=\"TextToken\">Hello world </Token></InterpolatedStringText><Interpolation startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"20\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"OpenBraceToken\">{</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">Name</Token></IdentifierName><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"CloseBraceToken\">}</Token></Interpolation></List_of_InterpolatedStringContent><Token kind=\"InterpolatedStringEndToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"StringEndToken\">\"</Token></InterpolatedStringExpression>", xElement.ToString(SaveOptions.DisableFormatting));
        }
    }
}
