using System.Xml.Linq;
using CommandLineApp;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests
{
    partial class RoslynMLTests
    {
        [TestMethod]
        public void ExternAliasDirectiveSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("extern alias a;").Externs[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ExternAliasDirective startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"15\"><Token kind=\"ExternKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"ExternKeyword\">extern</Token><Token kind=\"AliasKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"12\" part=\"AliasKeyword\">alias</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">a</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"SemicolonToken\">;</Token></ExternAliasDirective>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void UsingDirectiveSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseCompilationUnit("using static a;").Usings[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<UsingDirective startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"15\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"UsingKeyword\">using</Token><Token kind=\"StaticKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"12\" part=\"StaticKeyword\">static</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"SemicolonToken\">;</Token></UsingDirective>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseCompilationUnit("using a;").Usings[0];
            xElement = converter.Visit(node);
            Assert.AreEqual("<UsingDirective startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"8\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"UsingKeyword\">using</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"SemicolonToken\">;</Token></UsingDirective>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseCompilationUnit("using static A = a;").Usings[0];
            xElement = converter.Visit(node);
            Assert.AreEqual("<UsingDirective startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"19\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"UsingKeyword\">using</Token><Token kind=\"StaticKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"12\" part=\"StaticKeyword\">static</Token><NameEquals startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"16\" part=\"Alias\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">A</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"EqualsToken\">=</Token></NameEquals><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"SemicolonToken\">;</Token></UsingDirective>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseCompilationUnit("using A = a;").Usings[0];
            xElement = converter.Visit(node);
            Assert.AreEqual("<UsingDirective startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"12\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"UsingKeyword\">using</Token><NameEquals startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"9\" part=\"Alias\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Identifier\">A</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"EqualsToken\">=</Token></NameEquals><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"SemicolonToken\">;</Token></UsingDirective>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void AttributeListSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("[module: XAttribute(\"X\"), YAttribute(Y: 3), ZAttribute(Z= 4)]").AttributeLists[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<AttributeList startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"61\"><Token kind=\"OpenBracketToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"OpenBracketToken\">[</Token><AttributeTargetSpecifier startLine=\"1\" startColumn=\"2\" endLine=\"1\" endColumn=\"8\" part=\"Target\"><Token kind=\"ModuleKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"2\" endLine=\"1\" endColumn=\"7\" part=\"Identifier\">module</Token><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"ColonToken\">:</Token></AttributeTargetSpecifier><SeparatedList_of_Attribute part=\"Attributes\"><Attribute startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"24\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"19\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">XAttribute</Token></IdentifierName><AttributeArgumentList startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"24\" part=\"ArgumentList\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"OpenParenToken\">(</Token><SeparatedList_of_AttributeArgument part=\"Arguments\"><AttributeArgument startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\"><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Token\">X</Token></LiteralExpression></AttributeArgument></SeparatedList_of_AttributeArgument><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"CloseParenToken\">)</Token></AttributeArgumentList></Attribute><Attribute startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"42\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"36\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"36\" part=\"Identifier\">YAttribute</Token></IdentifierName><AttributeArgumentList startLine=\"1\" startColumn=\"37\" endLine=\"1\" endColumn=\"42\" part=\"ArgumentList\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"37\" endLine=\"1\" endColumn=\"37\" part=\"OpenParenToken\">(</Token><SeparatedList_of_AttributeArgument part=\"Arguments\"><AttributeArgument startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"41\"><NameColon startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"39\" part=\"NameColon\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"Identifier\">Y</Token></IdentifierName><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"39\" endLine=\"1\" endColumn=\"39\" part=\"ColonToken\">:</Token></NameColon><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"41\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"41\" part=\"Token\">3</Token></LiteralExpression></AttributeArgument></SeparatedList_of_AttributeArgument><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"CloseParenToken\">)</Token></AttributeArgumentList></Attribute><Attribute startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"60\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"54\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"54\" part=\"Identifier\">ZAttribute</Token></IdentifierName><AttributeArgumentList startLine=\"1\" startColumn=\"55\" endLine=\"1\" endColumn=\"60\" part=\"ArgumentList\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"55\" endLine=\"1\" endColumn=\"55\" part=\"OpenParenToken\">(</Token><SeparatedList_of_AttributeArgument part=\"Arguments\"><AttributeArgument startLine=\"1\" startColumn=\"56\" endLine=\"1\" endColumn=\"59\"><NameEquals startLine=\"1\" startColumn=\"56\" endLine=\"1\" endColumn=\"57\" part=\"NameEquals\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"56\" endLine=\"1\" endColumn=\"56\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"56\" endLine=\"1\" endColumn=\"56\" part=\"Identifier\">Z</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"57\" endLine=\"1\" endColumn=\"57\" part=\"EqualsToken\">=</Token></NameEquals><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"59\" endLine=\"1\" endColumn=\"59\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"59\" endLine=\"1\" endColumn=\"59\" part=\"Token\">4</Token></LiteralExpression></AttributeArgument></SeparatedList_of_AttributeArgument><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"60\" part=\"CloseParenToken\">)</Token></AttributeArgumentList></Attribute></SeparatedList_of_Attribute><Token kind=\"CloseBracketToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"61\" endLine=\"1\" endColumn=\"61\" part=\"CloseBracketToken\">]</Token></AttributeList>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void AttributeTargetSpecifierSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("[module: XAttribute(\"X\"), YAttribute(\"Y\": 3), ZAttribute(\"Z\"= 4)]").AttributeLists[0];
            var xElement = converter.Visit(node.Target);
            Assert.AreEqual("<AttributeTargetSpecifier startLine=\"1\" startColumn=\"2\" endLine=\"1\" endColumn=\"8\"><Token kind=\"ModuleKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"2\" endLine=\"1\" endColumn=\"7\" part=\"Identifier\">module</Token><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"ColonToken\">:</Token></AttributeTargetSpecifier>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void AttributeArgumentSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("[module: XAttribute(\"X\")]").AttributeLists[0].Attributes[0].ArgumentList.Arguments[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<AttributeArgument startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\"><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Token\">X</Token></LiteralExpression></AttributeArgument>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void AttributeArgumentListSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("[module: XAttribute(\"X\", Y: 3, Z= 4)]").AttributeLists[0].Attributes[0].ArgumentList;
            var xElement = converter.Visit(node);
            Assert.AreEqual("<AttributeArgumentList startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"36\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"OpenParenToken\">(</Token><SeparatedList_of_AttributeArgument part=\"Arguments\"><AttributeArgument startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\"><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Token\">X</Token></LiteralExpression></AttributeArgument><AttributeArgument startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"29\"><NameColon startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"27\" part=\"NameColon\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Identifier\">Y</Token></IdentifierName><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"ColonToken\">:</Token></NameColon><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Token\">3</Token></LiteralExpression></AttributeArgument><AttributeArgument startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"35\"><NameEquals startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"33\" part=\"NameEquals\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Identifier\">Z</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"EqualsToken\">=</Token></NameEquals><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"Token\">4</Token></LiteralExpression></AttributeArgument></SeparatedList_of_AttributeArgument><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"36\" part=\"CloseParenToken\">)</Token></AttributeArgumentList>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void AttributeSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("[module: XAttribute(\"X\", Y: 3, Z= 4)]").AttributeLists[0].Attributes[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<Attribute startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"36\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"19\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">XAttribute</Token></IdentifierName><AttributeArgumentList startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"36\" part=\"ArgumentList\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"OpenParenToken\">(</Token><SeparatedList_of_AttributeArgument part=\"Arguments\"><AttributeArgument startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\"><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Expression\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"23\" part=\"Token\">X</Token></LiteralExpression></AttributeArgument><AttributeArgument startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"29\"><NameColon startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"27\" part=\"NameColon\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Identifier\">Y</Token></IdentifierName><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"ColonToken\">:</Token></NameColon><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Token\">3</Token></LiteralExpression></AttributeArgument><AttributeArgument startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"35\"><NameEquals startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"33\" part=\"NameEquals\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Identifier\">Z</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"EqualsToken\">=</Token></NameEquals><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"Token\">4</Token></LiteralExpression></AttributeArgument></SeparatedList_of_AttributeArgument><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"36\" part=\"CloseParenToken\">)</Token></AttributeArgumentList></Attribute>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void CompilationUnitSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseCompilationUnit("extern alias b; using static d; [assembly: XAttribute] namespace c{};");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<CompilationUnit startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"69\"><List_of_ExternAliasDirective part=\"Externs\"><ExternAliasDirective startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"15\"><Token kind=\"ExternKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"ExternKeyword\">extern</Token><Token kind=\"AliasKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"12\" part=\"AliasKeyword\">alias</Token><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">b</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"SemicolonToken\">;</Token></ExternAliasDirective></List_of_ExternAliasDirective><List_of_UsingDirective part=\"Usings\"><UsingDirective startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"31\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"21\" part=\"UsingKeyword\">using</Token><Token kind=\"StaticKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"28\" part=\"StaticKeyword\">static</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Identifier\">d</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"SemicolonToken\">;</Token></UsingDirective></List_of_UsingDirective><List_of_AttributeList part=\"AttributeLists\"><AttributeList startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"54\"><Token kind=\"OpenBracketToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"OpenBracketToken\">[</Token><AttributeTargetSpecifier startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"42\" part=\"Target\"><Token kind=\"AssemblyKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"41\" part=\"Identifier\">assembly</Token><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"ColonToken\">:</Token></AttributeTargetSpecifier><SeparatedList_of_Attribute part=\"Attributes\"><Attribute startLine=\"1\" startColumn=\"44\" endLine=\"1\" endColumn=\"53\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"44\" endLine=\"1\" endColumn=\"53\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"44\" endLine=\"1\" endColumn=\"53\" part=\"Identifier\">XAttribute</Token></IdentifierName></Attribute></SeparatedList_of_Attribute><Token kind=\"CloseBracketToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"54\" endLine=\"1\" endColumn=\"54\" part=\"CloseBracketToken\">]</Token></AttributeList></List_of_AttributeList><List_of_MemberDeclaration part=\"Members\"><NamespaceDeclaration startLine=\"1\" startColumn=\"56\" endLine=\"1\" endColumn=\"69\"><Token kind=\"NamespaceKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"56\" endLine=\"1\" endColumn=\"64\" part=\"NamespaceKeyword\">namespace</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"66\" endLine=\"1\" endColumn=\"66\" part=\"Name\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"66\" endLine=\"1\" endColumn=\"66\" part=\"Identifier\">c</Token></IdentifierName><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"67\" endLine=\"1\" endColumn=\"67\" part=\"OpenBraceToken\">{</Token><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"68\" endLine=\"1\" endColumn=\"68\" part=\"CloseBraceToken\">}</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"69\" endLine=\"1\" endColumn=\"69\" part=\"SemicolonToken\">;</Token></NamespaceDeclaration></List_of_MemberDeclaration><Token kind=\"EndOfFileToken\" part=\"EndOfFileToken\"></Token></CompilationUnit>", xElement.ToString(SaveOptions.DisableFormatting));

            var gumtreefiedElement = converter.Gumtreefy(xElement);
        }
    }
}
