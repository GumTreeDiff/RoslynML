using System;
using System.Xml.Linq;
using CommandLineApp;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests
{
    partial class RoslynMLTests
    {
        [TestMethod]
        public void MemberDeclaration_GlobalStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(SyntaxFactory.ParseStatement("x++"));
            var xElement = converter.Visit(node);
            Assert.AreEqual("<GlobalStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\"><ExpressionStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"Statement\"><PostfixUnaryExpression kind=\"PostIncrementExpression\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"2\" endLine=\"1\" endColumn=\"3\" part=\"OperatorToken\">++</Token></PostfixUnaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" part=\"SemicolonToken\"></Token></ExpressionStatement></GlobalStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_BlockSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("{ x = 5;x += 3; }");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<Block startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"17\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"8\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"7\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"3\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"3\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"5\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"SemicolonToken\">;</Token></ExpressionStatement><ExpressionStatement startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"15\"><AssignmentExpression kind=\"AddAssignmentExpression\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"14\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"PlusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"12\" part=\"OperatorToken\">+=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Token\">3</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"CloseBraceToken\">}</Token></Block>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_VariableDeclaratorSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = (MethodDeclarationSyntax)SyntaxFactory.ParseCompilationUnit("int v() { const int a = 4; }").Members[0];
            var xElement = converter.Visit(((LocalDeclarationStatementSyntax)node.Body.Statements[0]).Declaration.Variables[0]);
            Assert.AreEqual("<VariableDeclarator startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"25\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">a</Token><EqualsValueClause startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"25\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator>", xElement.ToString(SaveOptions.DisableFormatting));

            node = (MethodDeclarationSyntax)SyntaxFactory.ParseCompilationUnit("int v() { const int z1 = 3/2; }").Members[0];
            xElement = converter.Visit(((LocalDeclarationStatementSyntax)node.Body.Statements[0]).Declaration.Variables[0]);
            Assert.AreEqual("<VariableDeclarator startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"28\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">z1</Token><EqualsValueClause startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"28\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"EqualsToken\">=</Token><BinaryExpression kind=\"DivideExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"28\" part=\"Value\"><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Left\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"SlashToken\" Operator=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"OperatorToken\">/</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"Token\">2</Token></LiteralExpression></BinaryExpression></EqualsValueClause></VariableDeclarator>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_VariableDeclarationSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = (MethodDeclarationSyntax)SyntaxFactory.ParseCompilationUnit("int v() { const int a = 4, b = 3; }").Members[0];
            var xElement = converter.Visit(((LocalDeclarationStatementSyntax)node.Body.Statements[0]).Declaration);
            Assert.AreEqual("<VariableDeclaration startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"32\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"19\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"19\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"25\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">a</Token><EqualsValueClause startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"25\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"32\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"Identifier\">b</Token><EqualsValueClause startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"32\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Token\">3</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_LocalDeclarationStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = (MethodDeclarationSyntax)SyntaxFactory.ParseCompilationUnit("int a() { const int a; }").Members[0];
            var xElement = converter.Visit(node.Body.Statements[0]);
            Assert.AreEqual("<LocalDeclarationStatement startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"22\"><TokenList part=\"Modifiers\"><Token kind=\"ConstKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"15\">const</Token></TokenList><VariableDeclaration startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"21\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"19\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"19\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">a</Token></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"SemicolonToken\">;</Token></LocalDeclarationStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_ExpressionStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("3");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ExpressionStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\"><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" part=\"SemicolonToken\"></Token></ExpressionStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_EmptyStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement(";");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<EmptyStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"SemicolonToken\">;</Token></EmptyStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_LabeledStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("l: 3");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<LabeledStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"1\" part=\"Identifier\">l</Token><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"2\" endLine=\"1\" endColumn=\"2\" part=\"ColonToken\">:</Token><ExpressionStatement startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Statement\"><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" part=\"SemicolonToken\"></Token></ExpressionStatement></LabeledStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_GotoStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("goto l;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<GotoStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"7\"><Token kind=\"GotoKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"GotoKeyword\">goto</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Identifier\">l</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"SemicolonToken\">;</Token></GotoStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("goto case l;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<GotoStatement kind=\"GotoCaseStatement\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"12\"><Token kind=\"GotoKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"GotoKeyword\">goto</Token><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"9\" part=\"CaseOrDefaultKeyword\">case</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">l</Token></IdentifierName><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"SemicolonToken\">;</Token></GotoStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("goto default;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<GotoStatement kind=\"GotoDefaultStatement\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"13\"><Token kind=\"GotoKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"GotoKeyword\">goto</Token><Token kind=\"DefaultKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"12\" part=\"CaseOrDefaultKeyword\">default</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"SemicolonToken\">;</Token></GotoStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_BreakStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("break;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<BreakStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\"><Token kind=\"BreakKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"BreakKeyword\">break</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"SemicolonToken\">;</Token></BreakStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_ContinueStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("continue;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ContinueStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"9\"><Token kind=\"ContinueKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"8\" part=\"ContinueKeyword\">continue</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"SemicolonToken\">;</Token></ContinueStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_ReturnStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("return 5;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ReturnStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"9\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"ReturnKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Token\">5</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"SemicolonToken\">;</Token></ReturnStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("return;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ReturnStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"7\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"ReturnKeyword\">return</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"SemicolonToken\">;</Token></ReturnStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_ThrowStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("throw 5;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ThrowStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"8\"><Token kind=\"ThrowKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"ThrowKeyword\">throw</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Token\">5</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"SemicolonToken\">;</Token></ThrowStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("throw;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ThrowStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\"><Token kind=\"ThrowKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"ThrowKeyword\">throw</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"SemicolonToken\">;</Token></ThrowStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_YieldStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("yield return 5;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<YieldStatement kind=\"YieldReturnStatement\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"15\"><Token kind=\"YieldKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"YieldKeyword\">yield</Token><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"12\" part=\"ReturnOrBreakKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Token\">5</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"SemicolonToken\">;</Token></YieldStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("yield return;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<YieldStatement kind=\"YieldReturnStatement\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"13\"><Token kind=\"YieldKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"YieldKeyword\">yield</Token><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"12\" part=\"ReturnOrBreakKeyword\">return</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"SemicolonToken\">;</Token></YieldStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("yield break;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<YieldStatement kind=\"YieldBreakStatement\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"12\"><Token kind=\"YieldKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"YieldKeyword\">yield</Token><Token kind=\"BreakKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"11\" part=\"ReturnOrBreakKeyword\">break</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"SemicolonToken\">;</Token></YieldStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_WhileStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("while (x < 0) x = 5;");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<WhileStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"20\"><Token kind=\"WhileKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"WhileKeyword\">while</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"LessThanExpression\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"12\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"LessThanToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"OperatorToken\">&lt;</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"Token\">0</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"CloseParenToken\">)</Token><ExpressionStatement startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"20\" part=\"Statement\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"SemicolonToken\">;</Token></ExpressionStatement></WhileStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("while (y != 6) { int y = 69; y++; }");
            xElement = converter.Visit(node);
            Assert.AreEqual("<WhileStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"35\"><Token kind=\"WhileKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"WhileKeyword\">while</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"NotEqualsExpression\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"13\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Identifier\">y</Token></IdentifierName><Token kind=\"ExclamationEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"11\" part=\"OperatorToken\">!=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Token\">6</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"35\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><LocalDeclarationStatement startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"28\"><VariableDeclaration startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"27\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"20\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"20\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"27\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">y</Token><EqualsValueClause startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"27\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"27\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"27\" part=\"Token\">69</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"SemicolonToken\">;</Token></LocalDeclarationStatement><ExpressionStatement startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"33\"><PostfixUnaryExpression kind=\"PostIncrementExpression\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"32\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Identifier\">y</Token></IdentifierName><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"32\" part=\"OperatorToken\">++</Token></PostfixUnaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"CloseBraceToken\">}</Token></Block></WhileStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_DoStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();
            var node = SyntaxFactory.ParseStatement("do x = 5; while (x < 0);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<DoStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"24\"><Token kind=\"DoKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"DoKeyword\">do</Token><ExpressionStatement startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"9\" part=\"Statement\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"8\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"SemicolonToken\">;</Token></ExpressionStatement><Token kind=\"WhileKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"15\" part=\"WhileKeyword\">while</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"LessThanExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"22\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"LessThanToken\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"OperatorToken\">&lt;</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"Token\">0</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"CloseParenToken\">)</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"SemicolonToken\">;</Token></DoStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("do { int y = 69; y++; } while (y != 6);");
            xElement = converter.Visit(node);
            Assert.AreEqual("<DoStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"39\"><Token kind=\"DoKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"DoKeyword\">do</Token><Block startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"23\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><LocalDeclarationStatement startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"16\"><VariableDeclaration startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"15\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"8\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"8\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"15\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Identifier\">y</Token><EqualsValueClause startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"15\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"15\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"15\" part=\"Token\">69</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"SemicolonToken\">;</Token></LocalDeclarationStatement><ExpressionStatement startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"21\"><PostfixUnaryExpression kind=\"PostIncrementExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"20\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Identifier\">y</Token></IdentifierName><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"20\" part=\"OperatorToken\">++</Token></PostfixUnaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"CloseBraceToken\">}</Token></Block><Token kind=\"WhileKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"29\" part=\"WhileKeyword\">while</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"NotEqualsExpression\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"37\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Identifier\">y</Token></IdentifierName><Token kind=\"ExclamationEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"35\" part=\"OperatorToken\">!=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"37\" endLine=\"1\" endColumn=\"37\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"37\" endLine=\"1\" endColumn=\"37\" part=\"Token\">6</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"CloseParenToken\">)</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"39\" endLine=\"1\" endColumn=\"39\" part=\"SemicolonToken\">;</Token></DoStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_ForStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("for(int a, b = 4; a < 0; a++, --b);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ForStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"35\"><Token kind=\"ForKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"ForKeyword\">for</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"16\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"7\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"7\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Identifier\">a</Token></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"16\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"Identifier\">b</Token><EqualsValueClause startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"16\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"FirstSemicolonToken\">;</Token><BinaryExpression kind=\"LessThanExpression\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"23\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"LessThanToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"OperatorToken\">&lt;</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Token\">0</Token></LiteralExpression></BinaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"SecondSemicolonToken\">;</Token><SeparatedList_of_Expression part=\"Incrementors\"><PostfixUnaryExpression kind=\"PostIncrementExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"28\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"28\" part=\"OperatorToken\">++</Token></PostfixUnaryExpression><PrefixUnaryExpression kind=\"PreDecrementExpression\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"33\"><Token kind=\"MinusMinusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"32\" part=\"OperatorToken\">--</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"Identifier\">b</Token></IdentifierName></PrefixUnaryExpression></SeparatedList_of_Expression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"34\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"SemicolonToken\">;</Token></EmptyStatement></ForStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("for(; a < 0; a++, --b);");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ForStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"23\"><Token kind=\"ForKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"ForKeyword\">for</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenParenToken\">(</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"5\" part=\"FirstSemicolonToken\">;</Token><BinaryExpression kind=\"LessThanExpression\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"11\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"LessThanToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"OperatorToken\">&lt;</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Token\">0</Token></LiteralExpression></BinaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"SecondSemicolonToken\">;</Token><SeparatedList_of_Expression part=\"Incrementors\"><PostfixUnaryExpression kind=\"PostIncrementExpression\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"16\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"16\" part=\"OperatorToken\">++</Token></PostfixUnaryExpression><PrefixUnaryExpression kind=\"PreDecrementExpression\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"21\"><Token kind=\"MinusMinusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"20\" part=\"OperatorToken\">--</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Identifier\">b</Token></IdentifierName></PrefixUnaryExpression></SeparatedList_of_Expression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"22\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"SemicolonToken\">;</Token></EmptyStatement></ForStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("for(int a, b = 4;; a++, --b);");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ForStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"29\"><Token kind=\"ForKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"ForKeyword\">for</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"16\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"7\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"7\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Identifier\">a</Token></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"16\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"Identifier\">b</Token><EqualsValueClause startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"16\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"FirstSemicolonToken\">;</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"SecondSemicolonToken\">;</Token><SeparatedList_of_Expression part=\"Incrementors\"><PostfixUnaryExpression kind=\"PostIncrementExpression\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"22\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"OperatorToken\">++</Token></PostfixUnaryExpression><PrefixUnaryExpression kind=\"PreDecrementExpression\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"27\"><Token kind=\"MinusMinusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"26\" part=\"OperatorToken\">--</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"Identifier\">b</Token></IdentifierName></PrefixUnaryExpression></SeparatedList_of_Expression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"SemicolonToken\">;</Token></EmptyStatement></ForStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("for(int a, b = 4; a < 0;);");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ForStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"26\"><Token kind=\"ForKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"ForKeyword\">for</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"16\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"7\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"7\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Identifier\">a</Token></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"16\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"Identifier\">b</Token><EqualsValueClause startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"16\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"FirstSemicolonToken\">;</Token><BinaryExpression kind=\"LessThanExpression\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"23\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"LessThanToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"OperatorToken\">&lt;</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"Token\">0</Token></LiteralExpression></BinaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"SecondSemicolonToken\">;</Token><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"SemicolonToken\">;</Token></EmptyStatement></ForStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("for(z1 = 3, z2 = 7; z3 < 10; ++z2, z1--){z -= 2;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ForStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"49\"><Token kind=\"ForKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"ForKeyword\">for</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenParenToken\">(</Token><SeparatedList_of_Expression part=\"Initializers\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"10\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"6\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"6\" part=\"Identifier\">z1</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Token\">3</Token></LiteralExpression></AssignmentExpression><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"18\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"14\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">z2</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Token\">7</Token></LiteralExpression></AssignmentExpression></SeparatedList_of_Expression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"FirstSemicolonToken\">;</Token><BinaryExpression kind=\"LessThanExpression\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"27\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">z3</Token></IdentifierName><Token kind=\"LessThanToken\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"OperatorToken\">&lt;</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"27\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"27\" part=\"Token\">10</Token></LiteralExpression></BinaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"SecondSemicolonToken\">;</Token><SeparatedList_of_Expression part=\"Incrementors\"><PrefixUnaryExpression kind=\"PreIncrementExpression\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"33\"><Token kind=\"PlusPlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"31\" part=\"OperatorToken\">++</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"33\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"33\" part=\"Identifier\">z2</Token></IdentifierName></PrefixUnaryExpression><PostfixUnaryExpression kind=\"PostDecrementExpression\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"39\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"37\" part=\"Operand\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"37\" part=\"Identifier\">z1</Token></IdentifierName><Token kind=\"MinusMinusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"39\" part=\"OperatorToken\">--</Token></PostfixUnaryExpression></SeparatedList_of_Expression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"49\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"41\" endLine=\"1\" endColumn=\"41\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"48\"><AssignmentExpression kind=\"SubtractAssignmentExpression\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"47\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Identifier\">z</Token></IdentifierName><Token kind=\"MinusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"44\" endLine=\"1\" endColumn=\"45\" part=\"OperatorToken\">-=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"47\" endLine=\"1\" endColumn=\"47\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"47\" endLine=\"1\" endColumn=\"47\" part=\"Token\">2</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"48\" endLine=\"1\" endColumn=\"48\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"49\" endLine=\"1\" endColumn=\"49\" part=\"CloseBraceToken\">}</Token></Block></ForStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_ForEachStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("foreach(int a in ac);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<ForEachStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"21\"><Token kind=\"ForEachKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"7\" part=\"ForEachKeyword\">foreach</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"OpenParenToken\">(</Token><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"11\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"11\" part=\"Keyword\">int</Token></PredefinedType><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Identifier\">a</Token><Token kind=\"InKeyword\" Keyword=\"true\" TypeParameterVariance=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"16\" part=\"InKeyword\">in</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">ac</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"SemicolonToken\">;</Token></EmptyStatement></ForEachStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("foreach(float z1 in zz){z -= 2;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<ForEachStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"32\"><Token kind=\"ForEachKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"7\" part=\"ForEachKeyword\">foreach</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"OpenParenToken\">(</Token><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"13\" part=\"Type\"><Token kind=\"FloatKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"13\" part=\"Keyword\">float</Token></PredefinedType><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"16\" part=\"Identifier\">z1</Token><Token kind=\"InKeyword\" Keyword=\"true\" TypeParameterVariance=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"19\" part=\"InKeyword\">in</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">zz</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"23\" endLine=\"1\" endColumn=\"23\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"32\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"31\"><AssignmentExpression kind=\"SubtractAssignmentExpression\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"30\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"Identifier\">z</Token></IdentifierName><Token kind=\"MinusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"28\" part=\"OperatorToken\">-=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"30\" endLine=\"1\" endColumn=\"30\" part=\"Token\">2</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"CloseBraceToken\">}</Token></Block></ForEachStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_UsingStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("using(int a, b = 4);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<UsingStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"20\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"UsingKeyword\">using</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"18\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"9\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"9\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">a</Token></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"18\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">b</Token><EqualsValueClause startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"18\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"SemicolonToken\">;</Token></EmptyStatement></UsingStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("using(float z1 = 3, z2 = 7){z -= 2;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<UsingStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"36\"><Token kind=\"UsingKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"UsingKeyword\">using</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"26\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"11\" part=\"Type\"><Token kind=\"FloatKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"11\" part=\"Keyword\">float</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"18\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">z1</Token><EqualsValueClause startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"18\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Token\">3</Token></LiteralExpression></EqualsValueClause></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"26\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">z2</Token><EqualsValueClause startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"26\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Token\">7</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"36\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"35\"><AssignmentExpression kind=\"SubtractAssignmentExpression\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"34\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Identifier\">z</Token></IdentifierName><Token kind=\"MinusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"32\" part=\"OperatorToken\">-=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"34\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"34\" part=\"Token\">2</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"36\" part=\"CloseBraceToken\">}</Token></Block></UsingStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_FixedStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("fixed(int a, b = 4);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<FixedStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"20\"><Token kind=\"FixedKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"FixedKeyword\">fixed</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"18\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"9\" part=\"Type\"><Token kind=\"IntKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"9\" part=\"Keyword\">int</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">a</Token></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"18\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">b</Token><EqualsValueClause startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"18\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Token\">4</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"SemicolonToken\">;</Token></EmptyStatement></FixedStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("fixed(float z1 = 3, z2 = 7){z -= 2;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<FixedStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"36\"><Token kind=\"FixedKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"5\" part=\"FixedKeyword\">fixed</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"OpenParenToken\">(</Token><VariableDeclaration startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"26\" part=\"Declaration\"><PredefinedType TypeSyntax=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"11\" part=\"Type\"><Token kind=\"FloatKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"11\" part=\"Keyword\">float</Token></PredefinedType><SeparatedList_of_VariableDeclarator part=\"Variables\"><VariableDeclarator startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"18\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">z1</Token><EqualsValueClause startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"18\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Token\">3</Token></LiteralExpression></EqualsValueClause></VariableDeclarator><VariableDeclarator startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"26\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"22\" part=\"Identifier\">z2</Token><EqualsValueClause startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"26\" part=\"Initializer\"><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"EqualsToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"Token\">7</Token></LiteralExpression></EqualsValueClause></VariableDeclarator></SeparatedList_of_VariableDeclarator></VariableDeclaration><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"36\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"35\"><AssignmentExpression kind=\"SubtractAssignmentExpression\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"34\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"Identifier\">z</Token></IdentifierName><Token kind=\"MinusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"32\" part=\"OperatorToken\">-=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"34\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"34\" part=\"Token\">2</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"35\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"36\" endLine=\"1\" endColumn=\"36\" part=\"CloseBraceToken\">}</Token></Block></FixedStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_CheckedExpressionSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("checked { x = 5;}");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<CheckedStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"17\"><Token kind=\"CheckedKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"7\" part=\"Keyword\">checked</Token><Block startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"17\" part=\"Block\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"16\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"15\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"CloseBraceToken\">}</Token></Block></CheckedStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_UnsafeExpressionSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("unsafe { x = 5;}");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<UnsafeStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"16\"><Token kind=\"UnsafeKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"UnsafeKeyword\">unsafe</Token><Block startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"16\" part=\"Block\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"15\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"14\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Identifier\">x</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"15\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"CloseBraceToken\">}</Token></Block></UnsafeStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_LockStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("lock(b = 4);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<LockStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"12\"><Token kind=\"LockKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"LockKeyword\">lock</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"5\" part=\"OpenParenToken\">(</Token><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"10\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"6\" part=\"Identifier\">b</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Token\">4</Token></LiteralExpression></AssignmentExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"SemicolonToken\">;</Token></EmptyStatement></LockStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("lock(z2 = 7){z -= 2;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<LockStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"21\"><Token kind=\"LockKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"4\" part=\"LockKeyword\">lock</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"5\" part=\"OpenParenToken\">(</Token><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"11\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"7\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"7\" part=\"Identifier\">z2</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Token\">7</Token></LiteralExpression></AssignmentExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"21\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"20\"><AssignmentExpression kind=\"SubtractAssignmentExpression\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"19\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"14\" endLine=\"1\" endColumn=\"14\" part=\"Identifier\">z</Token></IdentifierName><Token kind=\"MinusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"17\" part=\"OperatorToken\">-=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"Token\">2</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"CloseBraceToken\">}</Token></Block></LockStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_IfStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("if(b == 4);");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<IfStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"11\"><Token kind=\"IfKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"IfKeyword\">if</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"3\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"EqualsExpression\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"9\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Identifier\">b</Token></IdentifierName><Token kind=\"EqualsEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"7\" part=\"OperatorToken\">==</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Token\">4</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"SemicolonToken\">;</Token></EmptyStatement></IfStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("if(b == 4); else;");
            xElement = converter.Visit(node);
            Assert.AreEqual("<IfStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"17\"><Token kind=\"IfKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"IfKeyword\">if</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"3\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"EqualsExpression\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"9\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"Identifier\">b</Token></IdentifierName><Token kind=\"EqualsEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"6\" endLine=\"1\" endColumn=\"7\" part=\"OperatorToken\">==</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Token\">4</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"CloseParenToken\">)</Token><EmptyStatement startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"SemicolonToken\">;</Token></EmptyStatement><ElseClause startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"17\" part=\"Else\"><Token kind=\"ElseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"16\" part=\"ElseKeyword\">else</Token><EmptyStatement startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"Statement\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"SemicolonToken\">;</Token></EmptyStatement></ElseClause></IfStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("if(z2 == 7){z -= 2;}else{;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<IfStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"27\"><Token kind=\"IfKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"2\" part=\"IfKeyword\">if</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"3\" endLine=\"1\" endColumn=\"3\" part=\"OpenParenToken\">(</Token><BinaryExpression kind=\"EqualsExpression\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"10\" part=\"Condition\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"5\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"5\" part=\"Identifier\">z2</Token></IdentifierName><Token kind=\"EqualsEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"8\" part=\"OperatorToken\">==</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"Token\">7</Token></LiteralExpression></BinaryExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"CloseParenToken\">)</Token><Block startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"20\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"12\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"19\"><AssignmentExpression kind=\"SubtractAssignmentExpression\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"18\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"13\" endLine=\"1\" endColumn=\"13\" part=\"Identifier\">z</Token></IdentifierName><Token kind=\"MinusEqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"15\" endLine=\"1\" endColumn=\"16\" part=\"OperatorToken\">-=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"Token\">2</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"19\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"CloseBraceToken\">}</Token></Block><ElseClause startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"27\" part=\"Else\"><Token kind=\"ElseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"24\" part=\"ElseKeyword\">else</Token><Block startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"27\" part=\"Statement\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><EmptyStatement startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\"><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"26\" part=\"SemicolonToken\">;</Token></EmptyStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"CloseBraceToken\">}</Token></Block></ElseClause></IfStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_SwitchStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("switch(b){}");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<SwitchStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"11\"><Token kind=\"SwitchKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"SwitchKeyword\">switch</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"OpenParenToken\">(</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Identifier\">b</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"CloseParenToken\">)</Token><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"OpenBraceToken\">{</Token><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"11\" part=\"CloseBraceToken\">}</Token></SwitchStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("switch(b){case 1: break; case 2: case 3: return 3; case 4: return 4; default: return 10;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<SwitchStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"89\"><Token kind=\"SwitchKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"SwitchKeyword\">switch</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"OpenParenToken\">(</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Identifier\">b</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"CloseParenToken\">)</Token><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"OpenBraceToken\">{</Token><List_of_SwitchSection part=\"Sections\"><SwitchSection startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"24\"><List_of_SwitchLabel part=\"Labels\"><CaseSwitchLabel startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"17\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"14\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Token\">1</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"ColonToken\">:</Token></CaseSwitchLabel></List_of_SwitchLabel><List_of_Statement part=\"Statements\"><BreakStatement startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"24\"><Token kind=\"BreakKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"23\" part=\"BreakKeyword\">break</Token><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"SemicolonToken\">;</Token></BreakStatement></List_of_Statement></SwitchSection><SwitchSection startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"50\"><List_of_SwitchLabel part=\"Labels\"><CaseSwitchLabel startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"32\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"26\" endLine=\"1\" endColumn=\"29\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"31\" endLine=\"1\" endColumn=\"31\" part=\"Token\">2</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"ColonToken\">:</Token></CaseSwitchLabel><CaseSwitchLabel startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"40\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"34\" endLine=\"1\" endColumn=\"37\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"39\" endLine=\"1\" endColumn=\"39\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"39\" endLine=\"1\" endColumn=\"39\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"40\" part=\"ColonToken\">:</Token></CaseSwitchLabel></List_of_SwitchLabel><List_of_Statement part=\"Statements\"><ReturnStatement startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"50\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"47\" part=\"ReturnKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"49\" endLine=\"1\" endColumn=\"49\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"49\" endLine=\"1\" endColumn=\"49\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"50\" endLine=\"1\" endColumn=\"50\" part=\"SemicolonToken\">;</Token></ReturnStatement></List_of_Statement></SwitchSection><SwitchSection startLine=\"1\" startColumn=\"52\" endLine=\"1\" endColumn=\"68\"><List_of_SwitchLabel part=\"Labels\"><CaseSwitchLabel startLine=\"1\" startColumn=\"52\" endLine=\"1\" endColumn=\"58\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"52\" endLine=\"1\" endColumn=\"55\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"57\" endLine=\"1\" endColumn=\"57\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"57\" endLine=\"1\" endColumn=\"57\" part=\"Token\">4</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"58\" endLine=\"1\" endColumn=\"58\" part=\"ColonToken\">:</Token></CaseSwitchLabel></List_of_SwitchLabel><List_of_Statement part=\"Statements\"><ReturnStatement startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"68\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"65\" part=\"ReturnKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"67\" endLine=\"1\" endColumn=\"67\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"67\" endLine=\"1\" endColumn=\"67\" part=\"Token\">4</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"68\" endLine=\"1\" endColumn=\"68\" part=\"SemicolonToken\">;</Token></ReturnStatement></List_of_Statement></SwitchSection><SwitchSection startLine=\"1\" startColumn=\"70\" endLine=\"1\" endColumn=\"88\"><List_of_SwitchLabel part=\"Labels\"><DefaultSwitchLabel startLine=\"1\" startColumn=\"70\" endLine=\"1\" endColumn=\"77\"><Token kind=\"DefaultKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"70\" endLine=\"1\" endColumn=\"76\" part=\"Keyword\">default</Token><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"77\" endLine=\"1\" endColumn=\"77\" part=\"ColonToken\">:</Token></DefaultSwitchLabel></List_of_SwitchLabel><List_of_Statement part=\"Statements\"><ReturnStatement startLine=\"1\" startColumn=\"79\" endLine=\"1\" endColumn=\"88\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"79\" endLine=\"1\" endColumn=\"84\" part=\"ReturnKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"86\" endLine=\"1\" endColumn=\"87\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"86\" endLine=\"1\" endColumn=\"87\" part=\"Token\">10</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"88\" endLine=\"1\" endColumn=\"88\" part=\"SemicolonToken\">;</Token></ReturnStatement></List_of_Statement></SwitchSection></List_of_SwitchSection><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"89\" endLine=\"1\" endColumn=\"89\" part=\"CloseBraceToken\">}</Token></SwitchStatement>", xElement.ToString(SaveOptions.DisableFormatting));

            node = SyntaxFactory.ParseStatement("switch(c){default: return 5;}");
            xElement = converter.Visit(node);
            Assert.AreEqual("<SwitchStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"29\"><Token kind=\"SwitchKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"6\" part=\"SwitchKeyword\">switch</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"OpenParenToken\">(</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Expression\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"8\" endLine=\"1\" endColumn=\"8\" part=\"Identifier\">c</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"CloseParenToken\">)</Token><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"OpenBraceToken\">{</Token><List_of_SwitchSection part=\"Sections\"><SwitchSection startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"28\"><List_of_SwitchLabel part=\"Labels\"><DefaultSwitchLabel startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"18\"><Token kind=\"DefaultKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"17\" part=\"Keyword\">default</Token><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"18\" part=\"ColonToken\">:</Token></DefaultSwitchLabel></List_of_SwitchLabel><List_of_Statement part=\"Statements\"><ReturnStatement startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"28\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"25\" part=\"ReturnKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"27\" part=\"Token\">5</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"28\" endLine=\"1\" endColumn=\"28\" part=\"SemicolonToken\">;</Token></ReturnStatement></List_of_Statement></SwitchSection></List_of_SwitchSection><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"29\" endLine=\"1\" endColumn=\"29\" part=\"CloseBraceToken\">}</Token></SwitchStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void SwitchSectionSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var n = (SwitchStatementSyntax)SyntaxFactory.ParseStatement("switch(b){case 1: case 2: case 3: return 3; case 4: return 4; default: return 10;}");
            var node = n.Sections[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<SwitchSection startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"43\"><List_of_SwitchLabel part=\"Labels\"><CaseSwitchLabel startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"17\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"14\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Token\">1</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"ColonToken\">:</Token></CaseSwitchLabel><CaseSwitchLabel startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"25\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"19\" endLine=\"1\" endColumn=\"22\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"24\" endLine=\"1\" endColumn=\"24\" part=\"Token\">2</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"ColonToken\">:</Token></CaseSwitchLabel><CaseSwitchLabel startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"33\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"30\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"32\" endLine=\"1\" endColumn=\"32\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"33\" endLine=\"1\" endColumn=\"33\" part=\"ColonToken\">:</Token></CaseSwitchLabel></List_of_SwitchLabel><List_of_Statement part=\"Statements\"><ReturnStatement startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"43\"><Token kind=\"ReturnKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"35\" endLine=\"1\" endColumn=\"40\" part=\"ReturnKeyword\">return</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Expression\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"42\" endLine=\"1\" endColumn=\"42\" part=\"Token\">3</Token></LiteralExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"43\" endLine=\"1\" endColumn=\"43\" part=\"SemicolonToken\">;</Token></ReturnStatement></List_of_Statement></SwitchSection>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void CaseSwitchLabelSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var n = (SwitchStatementSyntax)SyntaxFactory.ParseStatement("switch(b){case 1: case 2: case 3: return 3; case 4: return 4; default: return 10;}");
            var node = n.Sections[0].Labels[0];
            var xElement = converter.Visit(node);
            Assert.AreEqual("<CaseSwitchLabel startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"17\"><Token kind=\"CaseKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"11\" endLine=\"1\" endColumn=\"14\" part=\"Keyword\">case</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Value\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"16\" endLine=\"1\" endColumn=\"16\" part=\"Token\">1</Token></LiteralExpression><Token kind=\"ColonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"ColonToken\">:</Token></CaseSwitchLabel>", xElement.ToString(SaveOptions.DisableFormatting));
        }

        [TestMethod]
        public void StatementSyntax_TryStatementSyntax_RoslynMLFromRoslyn_OK()
        {
            var converter = new RoslynML();

            var node = SyntaxFactory.ParseStatement("try{a + 5} catch(A1){a1 = \"Catch a1\";} catch(B1) when(e = 5) {b1 = \"Catch b1\";} finally{c1 = \"Finnally1\";}");
            var xElement = converter.Visit(node);
            Assert.AreEqual("<TryStatement startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"106\"><Token kind=\"TryKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"1\" endLine=\"1\" endColumn=\"3\" part=\"TryKeyword\">try</Token><Block startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"10\" part=\"Block\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"4\" endLine=\"1\" endColumn=\"4\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"9\"><BinaryExpression kind=\"AddExpression\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"9\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"5\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"5\" endLine=\"1\" endColumn=\"5\" part=\"Identifier\">a</Token></IdentifierName><Token kind=\"PlusToken\" Operator=\"true\" startLine=\"1\" startColumn=\"7\" endLine=\"1\" endColumn=\"7\" part=\"OperatorToken\">+</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"9\" endLine=\"1\" endColumn=\"9\" part=\"Token\">5</Token></LiteralExpression></BinaryExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" part=\"SemicolonToken\"></Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"10\" endLine=\"1\" endColumn=\"10\" part=\"CloseBraceToken\">}</Token></Block><List_of_CatchClause part=\"Catches\"><CatchClause startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"38\"><Token kind=\"CatchKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"12\" endLine=\"1\" endColumn=\"16\" part=\"CatchKeyword\">catch</Token><CatchDeclaration startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"20\" part=\"Declaration\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"17\" endLine=\"1\" endColumn=\"17\" part=\"OpenParenToken\">(</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"19\" part=\"Type\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"18\" endLine=\"1\" endColumn=\"19\" part=\"Identifier\">A1</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"20\" endLine=\"1\" endColumn=\"20\" part=\"CloseParenToken\">)</Token></CatchDeclaration><Block startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"38\" part=\"Block\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"21\" endLine=\"1\" endColumn=\"21\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"37\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"36\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"23\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"22\" endLine=\"1\" endColumn=\"23\" part=\"Identifier\">a1</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"25\" endLine=\"1\" endColumn=\"25\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"36\" part=\"Right\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"27\" endLine=\"1\" endColumn=\"36\" part=\"Token\">Catch a1</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"37\" endLine=\"1\" endColumn=\"37\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"38\" endLine=\"1\" endColumn=\"38\" part=\"CloseBraceToken\">}</Token></Block></CatchClause><CatchClause startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"79\"><Token kind=\"CatchKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"40\" endLine=\"1\" endColumn=\"44\" part=\"CatchKeyword\">catch</Token><CatchDeclaration startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"48\" part=\"Declaration\"><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"45\" endLine=\"1\" endColumn=\"45\" part=\"OpenParenToken\">(</Token><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"46\" endLine=\"1\" endColumn=\"47\" part=\"Type\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"46\" endLine=\"1\" endColumn=\"47\" part=\"Identifier\">B1</Token></IdentifierName><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"48\" endLine=\"1\" endColumn=\"48\" part=\"CloseParenToken\">)</Token></CatchDeclaration><CatchFilterClause startLine=\"1\" startColumn=\"50\" endLine=\"1\" endColumn=\"60\" part=\"Filter\"><Token kind=\"WhenKeyword\" Keyword=\"true\" Contextual=\"true\" startLine=\"1\" startColumn=\"50\" endLine=\"1\" endColumn=\"53\" part=\"WhenKeyword\">when</Token><Token kind=\"OpenParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"54\" endLine=\"1\" endColumn=\"54\" part=\"OpenParenToken\">(</Token><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"55\" endLine=\"1\" endColumn=\"59\" part=\"FilterExpression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"55\" endLine=\"1\" endColumn=\"55\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"55\" endLine=\"1\" endColumn=\"55\" part=\"Identifier\">e</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"57\" endLine=\"1\" endColumn=\"57\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"NumericLiteralExpression\" startLine=\"1\" startColumn=\"59\" endLine=\"1\" endColumn=\"59\" part=\"Right\"><Token kind=\"NumericLiteralToken\" startLine=\"1\" startColumn=\"59\" endLine=\"1\" endColumn=\"59\" part=\"Token\">5</Token></LiteralExpression></AssignmentExpression><Token kind=\"CloseParenToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"60\" endLine=\"1\" endColumn=\"60\" part=\"CloseParenToken\">)</Token></CatchFilterClause><Block startLine=\"1\" startColumn=\"62\" endLine=\"1\" endColumn=\"79\" part=\"Block\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"62\" endLine=\"1\" endColumn=\"62\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"63\" endLine=\"1\" endColumn=\"78\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"63\" endLine=\"1\" endColumn=\"77\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"63\" endLine=\"1\" endColumn=\"64\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"63\" endLine=\"1\" endColumn=\"64\" part=\"Identifier\">b1</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"66\" endLine=\"1\" endColumn=\"66\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"68\" endLine=\"1\" endColumn=\"77\" part=\"Right\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"68\" endLine=\"1\" endColumn=\"77\" part=\"Token\">Catch b1</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"78\" endLine=\"1\" endColumn=\"78\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"79\" endLine=\"1\" endColumn=\"79\" part=\"CloseBraceToken\">}</Token></Block></CatchClause></List_of_CatchClause><FinallyClause startLine=\"1\" startColumn=\"81\" endLine=\"1\" endColumn=\"106\" part=\"Finally\"><Token kind=\"FinallyKeyword\" Keyword=\"true\" startLine=\"1\" startColumn=\"81\" endLine=\"1\" endColumn=\"87\" part=\"FinallyKeyword\">finally</Token><Block startLine=\"1\" startColumn=\"88\" endLine=\"1\" endColumn=\"106\" part=\"Block\"><Token kind=\"OpenBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"88\" endLine=\"1\" endColumn=\"88\" part=\"OpenBraceToken\">{</Token><List_of_Statement part=\"Statements\"><ExpressionStatement startLine=\"1\" startColumn=\"89\" endLine=\"1\" endColumn=\"105\"><AssignmentExpression kind=\"SimpleAssignmentExpression\" startLine=\"1\" startColumn=\"89\" endLine=\"1\" endColumn=\"104\" part=\"Expression\"><IdentifierName Name=\"true\" TypeSyntax=\"true\" startLine=\"1\" startColumn=\"89\" endLine=\"1\" endColumn=\"90\" part=\"Left\"><Token kind=\"IdentifierToken\" startLine=\"1\" startColumn=\"89\" endLine=\"1\" endColumn=\"90\" part=\"Identifier\">c1</Token></IdentifierName><Token kind=\"EqualsToken\" Operator=\"true\" startLine=\"1\" startColumn=\"92\" endLine=\"1\" endColumn=\"92\" part=\"OperatorToken\">=</Token><LiteralExpression kind=\"StringLiteralExpression\" startLine=\"1\" startColumn=\"94\" endLine=\"1\" endColumn=\"104\" part=\"Right\"><Token kind=\"StringLiteralToken\" startLine=\"1\" startColumn=\"94\" endLine=\"1\" endColumn=\"104\" part=\"Token\">Finnally1</Token></LiteralExpression></AssignmentExpression><Token kind=\"SemicolonToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"105\" endLine=\"1\" endColumn=\"105\" part=\"SemicolonToken\">;</Token></ExpressionStatement></List_of_Statement><Token kind=\"CloseBraceToken\" Punctuation=\"true\" Language=\"true\" startLine=\"1\" startColumn=\"106\" endLine=\"1\" endColumn=\"106\" part=\"CloseBraceToken\">}</Token></Block></FinallyClause></TryStatement>", xElement.ToString(SaveOptions.DisableFormatting));
        }
    }
}
